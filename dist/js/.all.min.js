var TodoApp;!function(o){var t=function(){function o(o){this._todoData=o}return o.prototype.getHTML=function(){return'\n            <li class="listUOC-item">\n                <div href="#" class="listUOC-item-todo">'+this._todoData.todoTxt+'</div>\n                <button data-id="'+this._todoData.id+'"  class="btn btUOC listUOC-item-removeBt btUOC-grey"><span class="glyphicon glyphicon-trash"></span> Remove</button>\n            </li>\n            '},o}();o.TodoItem=t}(TodoApp||(TodoApp={}));var TodoApp;!function(o){var t=function(){function t(){var o=this;this._todoList=[],this._idCounter=0,this.saveNewTodo=function(){console.log("//SAVE NEW TODO");var t=o.$newTodoInput.val();if(""!=t){var s={id:o._idCounter,todoTxt:t};o.addTodo(s,!0),o.$newTodoInput.val("")}},this.onLoadTodosDataSuccess=function(t){var s,i,e;for(i=t.length,s=0;s<i;s++)e=t[s],o.addTodo(e,!1);o.render()},this.onLoadTodosDataError=function(){console.log("Error loading data.")},this.deleteTodo=function(t){console.log("//DELETE ITEM");var s=$(t.currentTarget);console.log("CLICK:"+parseInt(s.data("id"))),o.deleteTodoById(parseInt(s.data("id")))},this.$todoList=$(t.DOM_TODOLIST),this.$saveTodoBt=$(t.DOM_SAVETODO_BT),this.$newTodoInput=$(t.DOM_NEWTODO_INPUT),this.$todoList.on("click",".listUOC-item-removeBt",this.deleteTodo),this.$saveTodoBt.on("click",this.saveNewTodo),$("form").submit(function(){return!1}),this.checkTodoListData()}return t.prototype.render=function(){console.log("//RENDER");var s=$(t.DOM_TODOLIST_CONTAINER);this.$todoList.detach(),this.$todoList.empty();for(var i=0;i<this._todoList.length;i++){var e=new o.TodoItem(this._todoList[i]);this.$todoList.append(e.getHTML())}s.append(this.$todoList)},t.prototype.checkTodoListData=function(){var o,s;o=store.get(t.PERSISTENT_OBJECT_KEY),s=$(t.DOM_ALERT_FIRST_TIME),o?(s.remove(),this.onLoadTodosDataSuccess(o)):(console.log("//NO DATA"),this.loadFirstTimeData())},t.prototype.loadFirstTimeData=function(){$.ajax({dataType:"json",url:t.PERSISTENT_OBJECT_DATA_PATH,success:this.onLoadTodosDataSuccess,error:this.onLoadTodosDataError})},t.prototype.savePersistentData=function(){var o,s,i,e,T;for(T=[],s=this._todoList.length,o=0;o<s;o++)i=this._todoList[o],e={},e[t.PERSISTENT_OBJECT_TODO_ID]=i.id,e[t.PERSISTENT_OBJECT_TODO_TXT]=i.todoTxt,T.push(e);store.clear(),store.set(t.PERSISTENT_OBJECT_KEY,T)},t.prototype.addTodo=function(o,t){this._todoList.push(o),this._idCounter++,this.savePersistentData(),t&&this.render()},t.prototype.deleteTodoById=function(o){console.log("TODO DELETED");var t=0,s=this._todoList.length;for(t=0;t<s;t++)if(this._todoList[t].id==o){this._todoList.splice(t,1);break}this.savePersistentData(),this.render()},t}();t.DOM_TODOLIST_CONTAINER="#todo-list-container",t.DOM_TODOLIST="#todo-list",t.DOM_NEWTODO_INPUT="#new-todo-input",t.DOM_SAVETODO_BT="#save-todo-bt",t.DOM_ALERT_FIRST_TIME="#alert-first-time",t.PERSISTENT_OBJECT_KEY="todoList",t.PERSISTENT_OBJECT_DATA_PATH="data/defaultdata.json",t.PERSISTENT_OBJECT_TODO_ID="id",t.PERSISTENT_OBJECT_TODO_TXT="todoTxt",o.TodoList=t}(TodoApp||(TodoApp={}));var app;window.onload=function(){console.log("/// APP INIT"),app=new TodoApp.TodoList};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
